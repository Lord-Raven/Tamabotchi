# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Tamabotchi"

# A short tagline to show in search.
tagline: "Convert complex bot interactions into something a child of the nineties can relate to."

creator_notes: "Someone on the Discord said they thought this would be funny, like, I'm thinking at least a year ago. 
I started working on it that weekend, then put it down to work on other things. May as well finish it, I guess.
<br>
<br>
When added, the stage will look at the card's details and choose a subset of potential needs that seem relevant. 
Then, it will analyze every input or response to determine whether they impact any of the needs. 
The stage can feed different instruction to the bot based on high or low needs. 
If any of the character's needs hit 0, they can die, and the LLM will be told they are dead. Forever. 
Have fun! 
<br>
<br>
It's far from perfect in any regard. It doesn't initialize need values based on the intro or anything, it might pick \"bad\" needs, or it might fail to detect an appropriate change in the text. 
A lot of it is inference-based, so it's prone to mistakes."

# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'PRIVATE'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'ADJACENT'

# Self-explanatory.
tags:
 - 'Stage'
 - 'Add-on'
 - 'RPG'
 - 'Game'

# The schema of any user-supplied config.
# If your stage requires a configuration but has no
#   defined schema, it won't work.
config_schema:
  type: object
  properties:

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.


github_path: 'https://github.com/Lord-Raven/Tamabotchi'


extension_id: 'tamabotchi-2dba63df3bf1'

